---
title: "Regex, MAL, and Anime Birthdays"
format: html
jupyter: python3
---



```{python}
# #%%
# import zipfile
# from kaggle.api.kaggle_api_extended import KaggleApi

# #%%
# api = KaggleApi()
# api.authenticate() 

# #%%
# api.dataset_download_file('andreuvallhernndez/myanimelist-jikan','characters.csv')
# with zipfile.ZipFile('characters.csv.zip','r') as zipref:\
#     zipref.extractall()

# #%%
# api.dataset_download_file('andreuvallhernndez/myanimelist','anime.csv')
# with zipfile.ZipFile('anime.csv.zip','r') as zipref:\
#     zipref.extractall()
```

```{python}
#%%
import pandas as pd
import numpy as np
import altair as alt

#%%
char = pd.read_csv('characters.csv')

char_bday = char.filter(['name','about'])

pattern = '|'.join(['January', 'February', 'March', 'April', 'May', 'June', 'July','August', 'September', 'October', 'November', 'December'])

char_bday['about'] = char_bday['about'].str.findall(r'(January|February|March|April|May|June|July|August|September|October|November|December).([0-9][0-9])?')

char_bday['about'] = (pd.DataFrame(
    char_bday['about']
    .dropna()
    .to_list())
    [0])

char_bday = char_bday.dropna()

def check_two(input):
    if input[1] == "":
        return np.nan
    else: return input

char_bday["about"] = char_bday["about"].apply(check_two)

char_bday = char_bday.dropna()

def tuple_to_str(my_tuple):
    str = ''
    for item in my_tuple:
        str = str + " " + item
    return str

char_bday["about"] = (char_bday
    ["about"]
    .apply(tuple_to_str)
    .str.strip())

(char_bday
    .groupby("about")
    .size()
    .reset_index()
    .sort_values(0, ascending=False)
    .head(12))

char_bday.query("about == 'December 24'").head(6)

#%%
char_bday2 = char_bday

def make_date(input):
    full = input + ", 2000"
    try:
        full = pd.to_datetime(full, format = "%B %d, %Y")
    except:
        full = np.nan
    return full

char_bday2["about"] = (char_bday2["about"]
    .apply(make_date)
)

char_bday2 = char_bday2.dropna()

#%%
char_bday3 = (char_bday2
    .groupby("about")
    .size()
    .reset_index()
    .rename(columns={0:"freq","about":"bday"}))

alt.Chart(char_bday3).mark_bar().encode(
    x='bday',
    y='freq'
)

alt.Chart(char_bday3).mark_line().encode(
    x='bday',
    y='freq'
).interactive()
```



```{python}

```
